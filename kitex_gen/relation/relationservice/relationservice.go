// Code generated by Kitex v0.4.4. DO NOT EDIT.

package relationservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	relation "mini-tiktok-backend/kitex_gen/relation"
)

func serviceInfo() *kitex.ServiceInfo {
	return relationServiceServiceInfo
}

var relationServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "RelationService"
	handlerType := (*relation.RelationService)(nil)
	methods := map[string]kitex.MethodInfo{
		"RelationAction":            kitex.NewMethodInfo(relationActionHandler, newRelationServiceRelationActionArgs, newRelationServiceRelationActionResult, false),
		"GetFollowList":             kitex.NewMethodInfo(getFollowListHandler, newRelationServiceGetFollowListArgs, newRelationServiceGetFollowListResult, false),
		"GetFollowerList":           kitex.NewMethodInfo(getFollowerListHandler, newRelationServiceGetFollowerListArgs, newRelationServiceGetFollowerListResult, false),
		"GetFriendList":             kitex.NewMethodInfo(getFriendListHandler, newRelationServiceGetFriendListArgs, newRelationServiceGetFriendListResult, false),
		"MessageAction":             kitex.NewMethodInfo(messageActionHandler, newRelationServiceMessageActionArgs, newRelationServiceMessageActionResult, false),
		"MessageChat":               kitex.NewMethodInfo(messageChatHandler, newRelationServiceMessageChatArgs, newRelationServiceMessageChatResult, false),
		"GetFollowAndFollowerCount": kitex.NewMethodInfo(getFollowAndFollowerCountHandler, newRelationServiceGetFollowAndFollowerCountArgs, newRelationServiceGetFollowAndFollowerCountResult, false),
		"IsFollowToUser":            kitex.NewMethodInfo(isFollowToUserHandler, newRelationServiceIsFollowToUserArgs, newRelationServiceIsFollowToUserResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "relation",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func relationActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceRelationActionArgs)
	realResult := result.(*relation.RelationServiceRelationActionResult)
	success, err := handler.(relation.RelationService).RelationAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceRelationActionArgs() interface{} {
	return relation.NewRelationServiceRelationActionArgs()
}

func newRelationServiceRelationActionResult() interface{} {
	return relation.NewRelationServiceRelationActionResult()
}

func getFollowListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceGetFollowListArgs)
	realResult := result.(*relation.RelationServiceGetFollowListResult)
	success, err := handler.(relation.RelationService).GetFollowList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceGetFollowListArgs() interface{} {
	return relation.NewRelationServiceGetFollowListArgs()
}

func newRelationServiceGetFollowListResult() interface{} {
	return relation.NewRelationServiceGetFollowListResult()
}

func getFollowerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceGetFollowerListArgs)
	realResult := result.(*relation.RelationServiceGetFollowerListResult)
	success, err := handler.(relation.RelationService).GetFollowerList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceGetFollowerListArgs() interface{} {
	return relation.NewRelationServiceGetFollowerListArgs()
}

func newRelationServiceGetFollowerListResult() interface{} {
	return relation.NewRelationServiceGetFollowerListResult()
}

func getFriendListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceGetFriendListArgs)
	realResult := result.(*relation.RelationServiceGetFriendListResult)
	success, err := handler.(relation.RelationService).GetFriendList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceGetFriendListArgs() interface{} {
	return relation.NewRelationServiceGetFriendListArgs()
}

func newRelationServiceGetFriendListResult() interface{} {
	return relation.NewRelationServiceGetFriendListResult()
}

func messageActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceMessageActionArgs)
	realResult := result.(*relation.RelationServiceMessageActionResult)
	success, err := handler.(relation.RelationService).MessageAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceMessageActionArgs() interface{} {
	return relation.NewRelationServiceMessageActionArgs()
}

func newRelationServiceMessageActionResult() interface{} {
	return relation.NewRelationServiceMessageActionResult()
}

func messageChatHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceMessageChatArgs)
	realResult := result.(*relation.RelationServiceMessageChatResult)
	success, err := handler.(relation.RelationService).MessageChat(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceMessageChatArgs() interface{} {
	return relation.NewRelationServiceMessageChatArgs()
}

func newRelationServiceMessageChatResult() interface{} {
	return relation.NewRelationServiceMessageChatResult()
}

func getFollowAndFollowerCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceGetFollowAndFollowerCountArgs)
	realResult := result.(*relation.RelationServiceGetFollowAndFollowerCountResult)
	success, err := handler.(relation.RelationService).GetFollowAndFollowerCount(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceGetFollowAndFollowerCountArgs() interface{} {
	return relation.NewRelationServiceGetFollowAndFollowerCountArgs()
}

func newRelationServiceGetFollowAndFollowerCountResult() interface{} {
	return relation.NewRelationServiceGetFollowAndFollowerCountResult()
}

func isFollowToUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceIsFollowToUserArgs)
	realResult := result.(*relation.RelationServiceIsFollowToUserResult)
	success, err := handler.(relation.RelationService).IsFollowToUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceIsFollowToUserArgs() interface{} {
	return relation.NewRelationServiceIsFollowToUserArgs()
}

func newRelationServiceIsFollowToUserResult() interface{} {
	return relation.NewRelationServiceIsFollowToUserResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) RelationAction(ctx context.Context, req *relation.RelationActionRequest) (r *relation.RelationActionResponse, err error) {
	var _args relation.RelationServiceRelationActionArgs
	_args.Req = req
	var _result relation.RelationServiceRelationActionResult
	if err = p.c.Call(ctx, "RelationAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowList(ctx context.Context, req *relation.GetFollowListRequest) (r *relation.GetFollowListResponse, err error) {
	var _args relation.RelationServiceGetFollowListArgs
	_args.Req = req
	var _result relation.RelationServiceGetFollowListResult
	if err = p.c.Call(ctx, "GetFollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowerList(ctx context.Context, req *relation.GetFollowerListRequest) (r *relation.GetFollowerListResponse, err error) {
	var _args relation.RelationServiceGetFollowerListArgs
	_args.Req = req
	var _result relation.RelationServiceGetFollowerListResult
	if err = p.c.Call(ctx, "GetFollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFriendList(ctx context.Context, req *relation.GetFriendListRequest) (r *relation.GetFriendListResponse, err error) {
	var _args relation.RelationServiceGetFriendListArgs
	_args.Req = req
	var _result relation.RelationServiceGetFriendListResult
	if err = p.c.Call(ctx, "GetFriendList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MessageAction(ctx context.Context, req *relation.MessageActionRequest) (r *relation.MessageActionResponse, err error) {
	var _args relation.RelationServiceMessageActionArgs
	_args.Req = req
	var _result relation.RelationServiceMessageActionResult
	if err = p.c.Call(ctx, "MessageAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MessageChat(ctx context.Context, req *relation.MessageChatRequest) (r *relation.MessageChatResponse, err error) {
	var _args relation.RelationServiceMessageChatArgs
	_args.Req = req
	var _result relation.RelationServiceMessageChatResult
	if err = p.c.Call(ctx, "MessageChat", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowAndFollowerCount(ctx context.Context, req *relation.GetFollowAndFollowerCountRequest) (r *relation.GetFollowAndFollowerCountResponse, err error) {
	var _args relation.RelationServiceGetFollowAndFollowerCountArgs
	_args.Req = req
	var _result relation.RelationServiceGetFollowAndFollowerCountResult
	if err = p.c.Call(ctx, "GetFollowAndFollowerCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IsFollowToUser(ctx context.Context, req *relation.IsFollowToUserRequest) (r *relation.IsFollowToUserResponse, err error) {
	var _args relation.RelationServiceIsFollowToUserArgs
	_args.Req = req
	var _result relation.RelationServiceIsFollowToUserResult
	if err = p.c.Call(ctx, "IsFollowToUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
