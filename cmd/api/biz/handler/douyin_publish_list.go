// Code generated by hertz generator.

package handler

import (
	"context"
	"mini-tiktok-backend/cmd/api/biz/mw"
	"mini-tiktok-backend/cmd/api/biz/rpc"
	"mini-tiktok-backend/pkg/errno"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	api_publish "mini-tiktok-backend/cmd/api/biz/model/api/publish"
	"mini-tiktok-backend/kitex_gen/publish"
	pkg_consts "mini-tiktok-backend/pkg/consts"
)

// DouyinPublishList .
// @router /douyin/publish/list/ [GET]
func DouyinPublishList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api_publish.DouyinPublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api_publish.DouyinPublishListResponse)
	user, _ := c.Get(pkg_consts.IdentityKey)

	videos, err := rpc.GetPublishList(ctx, &publish.GetPublishListRequest{
		UserId:       user.(*mw.User).UserId,
		TargetUserId: req.UserID,
	})
	if err != nil {
		Err := errno.ConvertErr(err)
		resp.StatusCode = int32(Err.ErrCode)
		resp.StatusMsg = Err.ErrMsg
		c.JSON(consts.StatusOK, resp)
		return
	}

	resp.VideoList = Videos(videos)

	c.JSON(consts.StatusOK, resp)
}

func Videos(videos []*publish.Video) []*api_publish.Video {
	res := make([]*api_publish.Video, 0)
	for _, v := range videos {
		res = append(res, &api_publish.Video{
			ID: v.Id,
			Author: &api_publish.User{
				ID:            v.Author.Id,
				Name:          v.Author.Name,
				FollowCount:   v.Author.FollowerCount,
				FollowerCount: v.Author.FollowCount,
				IsFollow:      v.Author.IsFollow,
			},
			PlayURL:       v.PlayUrl,
			CoverURL:      v.CoverUrl,
			FavoriteCount: v.FavoriteCount,
			CommentCount:  v.CommentCount,
			IsFavorite:    v.IsFavorite,
			Title:         v.Title,
		})
	}
	return res
}
